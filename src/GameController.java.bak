import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;


public class GameController 
{
	private ArrayList<IBoard> 	_boards;
	private	ArrayList<ISolver>	_solvers;
	
	public GameController()
	{
		//compareDepthRandomBoard();
		//compareChildPoliciesRandomBoard();
		//comparePlayingChildPoliciesRandomBoard();
		//comparePlayingEOthello();
		//compareNodeExpantionEOthello();
		//compareAllOthello();
		//compareAllCAR();
		//compareERandomBoard();
		//compareChance();
		//compareSolvingOthello();
		//compareSolvingCopsAndRobber();
		//compareSolvingCopsAndRobberWithChance();
		compareDice();
		compareWABandBinary();
	}
	
	public void RunAll()
	{
		for (IBoard board : _boards)
		{
		
			for (ISolver solver1 : _solvers) 
				for (ISolver solver2 : _solvers) 
				{
					if(solver1 == solver2)
						continue;
					IBoard 	currentBoard 	= board.copyBoard();
					ISolver currentSolver1 	= solver1.copySolver();
					ISolver currentSolver2 	= solver2.copySolver();
					currentBoard 			= RunOneGame (currentBoard, currentSolver1, currentSolver2);
					WriteGameToFile (currentBoard, currentSolver1, currentSolver2);
				}
		}
	}
	
	public void SolveAll()
	{
		int instanceID = 0;
		for (IBoard board : _boards)
		{
			for (ISolver solver : _solvers) 
			{
				IBoard 	currentBoard 	= board.copyBoard();
				ISolver currentSolver 	= solver.copySolver();
				SolveOneGame (currentBoard, currentSolver);
				WriteSolverToFile (currentBoard, currentSolver, instanceID);
			}
			instanceID++;
		}
	}
	

	private IBoard RunOneGame
	(
		IBoard 	board,
		ISolver solver1,
		ISolver solver2
	)
	{
		printGameInfo(board, solver1, solver2);
		while (!board.isTheGameOver())
		{
			board.printBoard();
			IMove move = null;
			if 		(board.getCurrentPlayer() == '1')
			{
				move  = solver1.play(board);
				board = board.getNewChildBoard(move);
			}
			else if (board.getCurrentPlayer() == '2')
			{
				move  = solver2.play(board);
				board = board.getNewChildBoard(move);
			}
			else if (board.getCurrentPlayer() == '0')
			{
				double cumulativeChance = 0;
				Random rand 			= new Random();
				double chance 			= rand.nextDouble();
				List<IMove> moves 	= board.getLegalMoves();
				for (IMove possibleMove : moves)
				{
					IBoard possibleBoard = board.getNewChildBoard(possibleMove);
					cumulativeChance += possibleBoard.getChance();
					if(chance < cumulativeChance)
					{
						board = possibleBoard;
						break;
					}
				}
			}
			
		}
		return board;
	}
	
	private Pair SolveOneGame
	(
		IBoard 	board,
		ISolver solver
	)
	{
		printSolveInfo(board, solver);
		//board.printBoard();
		return solver.solve(board);
	}
	
	private void printGameInfo
	(
			IBoard 	board,
			ISolver solver1,
			ISolver solver2
	)
	{
		System.out.println(board.getBoardName() + "| Player1 - " + solver1.getSolverName() + "| Player2 - " + solver2.getSolverName());
	}
	
	private void printSolveInfo
	(
			IBoard 	board,
			ISolver solver1
	)
	{
		System.out.println(board.getBoardName() + "| Solver - " + solver1.getSolverName());
	}
	
	private void WriteGameToFile
	(
		IBoard 		board,
		ISolver 	solver1,
		ISolver 	solver2
	)
	{
		String 		filePath = "C:\\Users\\USER\\Documents\\Results";
		String 		fileName = "Results.csv";
		
		String 		file		= filePath + "\\" + fileName;
		
		WriteGameHeaderToFile(file);
		double 		score = board.getScore();
		solver1.writeGameToFile(file, board, score);
		solver2.writeGameToFile(file, board, - score);
	}
	
	private void WriteGameHeaderToFile
	(
		String file
	)
	{
		try 
		{
			File tmpDir = new File(file);
			if(tmpDir.exists())
				return;
			
			FileWriter pw = new FileWriter(file, true);
	
			pw.append("e");
			pw.append(",");
			pw.append("score");
			pw.append(",");
			pw.append("ChildSelectionPolicy");
			pw.append(",");
			pw.append("maxDepth");
			pw.append(",");
			pw.append("expands");
			pw.append(",");
			pw.append("maxExpands");
			pw.append(",");
			pw.append("vmin");
			pw.append(",");
			pw.append("vmax");
			pw.append(",");
			pw.append("board");
			pw.append("\n");
			
	        pw.flush();
	        pw.close();
		}
		catch (Exception e) 
		{
			// TODO: handle exception
		}
	}

	private void WriteSolverToFile
	(
		IBoard 		board,
		ISolver 	solver,
		int			instanceID
	)
	{
		String 		filePath = ".\\Results";
		String 		fileName = "Results.csv";
		
		String 		file		= filePath + "\\" + fileName;
		
		WriteSolverHeaderToFile(file);
		solver.writeSolverToFile(file, board, instanceID);
	}
	
	private void WriteSolverHeaderToFile
	(
		String file
	)
	{
		try 
		{
			File tmpDir = new File(file);
			if(tmpDir.exists())
				return;
			
			FileWriter pw = new FileWriter(file, true);
	
			pw.append("instance");
			pw.append(",");
			pw.append("e");
			pw.append(",");
			pw.append("pess");
			pw.append(",");
			pw.append("opti");
			pw.append(",");
			pw.append("opti-pess");
			pw.append(",");
			pw.append("maxDepth");
			pw.append(",");
			pw.append("expands");
			pw.append(",");
			pw.append("time");
			pw.append(",");
			pw.append("maxExpands");
			pw.append(",");
			pw.append("vmin");
			pw.append(",");
			pw.append("vmax");
			pw.append(",");
			pw.append("board");
			pw.append("\n");
			
	        pw.flush();
	        pw.close();
		}
		catch (Exception e) 
		{
			throw new RuntimeException(e);
		}
	}

	private void compareSelectingChildMethods(int depth, double ee)
	{
		_boards.add(new OthelloBoard(6, '1'));
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double 									lowerBound			= -100;
		double									upperBound			= 100;
		double									e					= ee;
		int 									maxDepth			= depth;
		
		
			_solvers.add(new RandomSolver());
			//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.OPTI));
			//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.PESS));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, ee, depth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
	}
	
	
	private void comparePlayingChildPoliciesRandomBoard()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		int 	branchingFactor	= 3;
		int 	depth			= 3;
		double 	lowerBound		= 0;
		double 	upperBound		= 10000;
		
		for(int seed = 0; seed < 10000; seed++)
			_boards.add(new RandomBoard(branchingFactor, depth, seed, lowerBound, upperBound));
		
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		int 									maxDepth			= Integer.MAX_VALUE;
			
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1000, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1000, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.OPTI));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1000, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.PESS));

		RunAll();
	}
	
	
	private void compareERandomBoard()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		int 	branchingFactor	= 3;
		int 	depth			= 6;
		double 	lowerBound		= 0;
		double 	upperBound		= 10000;
		
		for(int seed = 0; seed < 100; seed++)
			_boards.add(new RandomBoard(branchingFactor, depth, seed, lowerBound, upperBound));
		
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		IHeuristic 								othelloHeuristicNoise 	= new OthelloHeuristic();
		((OthelloHeuristic)othelloHeuristicNoise).noise = true;
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		//double									e					= 0;
		int 									maxDepth			= Integer.MAX_VALUE;
		
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristicNoise, ePolicy, lowerBound, upperBound, 0, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, 0, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		RunAll();
		
		for (double e = 1; e < 8193; e=e*2)
		{
			_solvers		= new ArrayList<ISolver>();
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristicNoise, ePolicy, lowerBound, upperBound, 0, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			RunAll();
		}
	}
	
	private void compareChildPoliciesOthello()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		int 	boardSize		= 4;
		double 	lowerBound		= - (boardSize * boardSize);
		double 	upperBound		= boardSize * boardSize;
		
		_boards.add(new OthelloBoard(boardSize,'1'));
		
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		int 									maxDepth			= Integer.MAX_VALUE;
			
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 2, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 4, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 8, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 16, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));

		RunAll();
	}
	
	private void comparePlayingEOthello()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		int 	boardSize		= 6;
		double 	lowerBound		= - (boardSize * boardSize);
		double 	upperBound		= boardSize * boardSize;
		
		_boards.add(new OthelloBoard(boardSize,'1'));
		
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		int 									maxDepth			= Integer.MAX_VALUE;
			
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 2, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 4, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 8, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));

		RunAll();
	}
	
	private void compareNodeExpantionEOthello()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		int 	boardSize		= 6;
		double 	lowerBound		= - (boardSize * boardSize);
		double 	upperBound		= boardSize * boardSize;
		
		_boards.add(new OthelloBoard(boardSize,'1'));
		
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		int 									maxDepth			= 5;
			
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 2, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 4, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 8, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 16, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 32, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 64, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
	
		SolveAll();
	}
	
	
	private void compareAllOthello()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		int 	boardSize		= 6;
		double 	lowerBound		= - (boardSize * boardSize);
		double 	upperBound		= boardSize * boardSize;
		
		_boards.add(new OthelloBoard(boardSize,'1'));
		
		
		IHeuristic 								othelloHeuristic 			= new OthelloHeuristic();
		OthelloHeuristic 						othelloHeuristicWithNoise 	= new OthelloHeuristic();
		othelloHeuristicWithNoise.noise = true;
	
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double[]								eValues				= {0, 1, 2, 4, 8, 16, 32};
		
		for(int instance = 0; instance <150; instance++)
			for(int maxDepth = 3; maxDepth <= 7; maxDepth++)
				for (double e: eValues)
				{
					_solvers = new ArrayList<ISolver>();
					_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristicWithNoise, ePolicy, lowerBound, upperBound, 0, 4, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
					_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
					RunAll();
				}
	}
	
	private void compareAllCAR()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		//int 	boardSize		= 6;
		double 	lowerBound		= 0;
		double 	upperBound		= Double.MAX_VALUE;
		
		
		_boards.add(new CopsAndRobberBoard(6, 6, 0.2, 4, -1));
		
		
		IHeuristic 								CARHeuristic 			= new CopsAndRobberHeuristic();
	
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double[]								eValues				= {0, 1, 2, 4};
		int[]									depthes				= {2, 3, 4};
		
		for (double e : eValues)
			for (int depth : depthes)
				_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e, depth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, 0.1, Double.MAX_VALUE, 0, 3, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, 0, Double.MAX_VALUE, 2, 3, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, 0, Double.MAX_VALUE, 4, 3, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));

		RunAll();	
	}
	
	
	private void compareChance()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		//int 	branchingFactor	= 3;
		//int 	depth			= 3;
		double 	lowerBound		= 0;
		double 	upperBound		= 100;
		double	chance			= 0.8;
		
		//int seed = 16;
		//int depth = 3;
		//int branchingFactor = 2;
		for(int seed = 0; seed < 100; seed++)
		{
			/*_boards.add(new RandomBoard(branchingFactor, 
			    	    		depth, 
			    	   			seed,
			    	   			'1',
			    	   			lowerBound,
			    	   			upperBound,
			    	   			chance));*/
			for (int depth = 2; depth <= 5; depth ++) // 3->9
				for (int branchingFactor = 2; branchingFactor <= 5; branchingFactor++) // 2->5
					_boards.add(new RandomBoard(branchingFactor, 
		    	    		depth, 
		    	   			seed,
		    	   			'1',
		    	   			lowerBound,
		    	   			upperBound, chance));

		}
		
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		int 									maxDepth			= Integer.MAX_VALUE;
			
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 2, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 3, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 4, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 8, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 16, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 24, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 32, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 48, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 64, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 80, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 96, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));

		//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 128, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 256, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 512, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1024, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 2046, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 4096, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		//_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 8182, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));

		SolveAll();
	}
	
	
	private void compareSolvingOthello()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		int 	boardSize		= 6;
		double 	lowerBound		= - (boardSize * boardSize);
		double 	upperBound		= boardSize * boardSize;
		
		_boards.add(new OthelloBoard(boardSize,'1'));
		
		
		IHeuristic 								othelloHeuristic 	= new OthelloHeuristic();
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		//int 									maxDepth			= 5;
			
		for (int maxDepth = 3; maxDepth < 16; maxDepth++)
		{
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 1, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 2, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 4, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 8, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 16, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 32, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(othelloHeuristic, ePolicy, lowerBound, upperBound, e + 64, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		}
		SolveAll();
	}
	
	private void compareSolvingCopsAndRobber()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		//int 	boardSize		= 6;
		int 	cops			= 3;
		
		
		for (int ins = 0; ins < 30; ins ++)
		{
			_boards.add(new CopsAndRobberBoard(6, 6, 0, cops, ins));
			_boards.add(new CopsAndRobberBoard(6, 6, 0.2, cops, ins));
			_boards.add(new CopsAndRobberBoard(6, 6, 0.4, cops, ins));
			_boards.add(new CopsAndRobberBoard(6, 6, 0.6, cops, ins));
		}
		
		double 	lowerBound		= 0;
		double 	upperBound		= 36 * 2;
		
		IHeuristic 								CARHeuristic 			= new CopsAndRobberHeuristic();

		
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		//int 									maxDepth			= 3;
		
		for (int maxDepth = 2; maxDepth < 9; maxDepth = maxDepth + 2)
		{
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 1, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 2, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 4, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 8, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 16, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 32, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 64, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		}
		SolveAll();
	}
	
	
	private void compareSolvingCopsAndRobberWithChance()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		//int 	boardSize		= 6;
		int 	cops			= 3;
		
		for (; cops < 4; cops ++)
			for (int ins = 0; ins < 50; ins ++)
			{
				_boards.add(new CopsAndRobberBoard(8, 8, 0.2, cops, null, 0.8, ins));
				//_boards.add(new CopsAndRobberBoard(6, 6, 0.2, cops));
				//_boards.add(new CopsAndRobberBoard(6, 6, 0.4, cops));
				//_boards.add(new CopsAndRobberBoard(6, 6, 0.6, cops));
			}
		
		double 	lowerBound		= 0;
		double 	upperBound		= 24;
		
		IHeuristic 								CARHeuristic 			= new CopsAndRobberHeuristic();

		
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		double									e					= 0;
		//int 									maxDepth			= 3;
		
		for (int maxDepth = 3; maxDepth < 4; maxDepth = maxDepth + 1)
		{
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 1, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 2, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 3, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 4, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 6, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 8, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 10, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 12, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 14, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 16, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 20, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 24, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 28, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 32, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 40, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 48, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
			//_solvers.add(new WeightedAlphaBetaPruning(CARHeuristic, ePolicy, lowerBound, upperBound, e + 64, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
		}
		SolveAll();
	}
	
	
	private void compareDice()
	{
		_boards			= new ArrayList<IBoard>();
		_solvers		= new ArrayList<ISolver>();
		
		int 	boardSize		= 4;
		int 	winSize			= 3;
		double 	lowerBound		= 0;
		double 	upperBound		= 1;
		
		//_boards.add(new DiceBoard(boardSize, winSize));
		
		//_boards.add(new DiceBoard(boardSize, winSize, 0, 0));
		for (int seed = 0; seed < 50; seed++)
			for (int d = 3; d >= 3; d--)
				_boards.add(new DiceBoard(boardSize, winSize, d, seed));
		
		
		IHeuristic 								diceHeuristic 				= new DiceHeuristic();
		//OthelloHeuristic 						othelloHeuristicWithNoise 	= new OthelloHeuristic();
		//othelloHeuristicWithNoise.noise = true;
	
		WeightedAlphaBetaPruning.ErrorPolicy 	ePolicy 			= WeightedAlphaBetaPruning.ErrorPolicy.NONE;
		//double[]								eValues				= {0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1/*, 2, 4, 8, 16, 32*/};
		int maxDepth = Integer.MAX_VALUE;
		//for(int instance = 0; instance < 1; instance++)
			for(double e = 1; e >= 0; e=e-0.1)
				//for (double e: eValues)
				{
					//_solvers.add(new WeightedAlphaBetaPruning(diceHeuristic, ePolicy, lowerBound, upperBound, 0, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
					_solvers.add(new WeightedAlphaBetaPruning(diceHeuristic, ePolicy, lowerBound, upperBound, e, maxDepth, WeightedAlphaBetaPruning.ChildSelectionMethod.AVERAGE));
					//RunAll();
				}
		SolveAll();
	}
}
